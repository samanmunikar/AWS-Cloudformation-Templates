{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "console.log('Loading DynamoDB Lambda function');\nvar AWS = require('aws-sdk');\nvar dynamo = new AWS.DynamoDB.DocumentClient();\nexports.handler = function(event, context, callback) {\n//console.log('Received event:', JSON.stringify(event, null, 2));\nvar operation = event.operation;\nif (event.tableName) {\n  event.payload.TableName = event.tableName;\n}\nswitch (operation) {\n      case 'create':\n          dynamo.put(event.payload, callback);\n          break;\n      case 'read':\n          dynamo.get(event.payload, callback);\n          break;\n      case 'update':\n          dynamo.update(event.payload, callback);\n          break;\n      case 'delete':\n          dynamo.delete(event.payload, callback);\n          break;\n      case 'list':\n          dynamo.scan(event.payload, callback);\n          break;\n      default:\n          callback('Unknown operation: ${operation}');\n}\n};\n"
        },
        "FunctionName": {
          "Ref": "LambdaFuncName"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "Role": {
          "Fn::GetAtt": [
            "IAMRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DynamoDBTable"
      ]
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Ref": "DynamoDBTableName"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      },
      "DependsOn": [
        "IAMRole"
      ]
    },
    "APIGatewayRestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Ref": "APIName"
        }
      },
      "DependsOn": [
        "LambdaFunction"
      ]
    },
    "APIGatewayResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "APIGatewayRestAPI"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "APIGatewayRestAPI",
            "RootResourceId"
          ]
        },
        "PathPart": {
          "Ref": "LambdaFuncName"
        }
      },
      "DependsOn": [
        "APIGatewayRestAPI"
      ]
    },
    "APIGatewayMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "APIGatewayRestAPI"
        },
        "ResourceId": {
          "Ref": "APIGatewayResource"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations",
              {
                "LambdaFuncNameArn": {
                  "Fn::GetAtt": [
                    "LambdaFunction",
                    "Arn"
                  ]
                }
              }
            ]
          }
        }
      },
      "DependsOn": [
        "APIGatewayResource"
      ]
    },
    "APIGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "APIGatewayRestAPI"
        },
        "StageName": {
          "Ref": "EnvironmentName"
        }
      },
      "DependsOn": [
        "APIGatewayMethod"
      ]
    },
    "APIGatewayPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      },
      "DependsOn": [
        "APIGatewayDeployment"
      ]
    },
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Policy_api-lambda-db",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:TagResource",
                    "dynamodb:UntagResource",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Parameters": {
    "LambdaFuncName": {
      "Type": "String",
      "Default": "Lambda_api-lambda-db"
    },
    "DynamoDBTableName": {
      "Type": "String",
      "Default": "Dynamo_api-lambda-db"
    },
    "APIName": {
      "Type": "String",
      "Default": "API_api-lambda-db"
    },
    "EnvironmentName": {
      "Type": "String",
      "Default": "Prod"
    }
  }
}